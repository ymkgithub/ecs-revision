name: Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      revision:
        description: 'Task definition revision to deploy'
        required: true
        default: ''  # This will be set dynamically

jobs:
  fetch-latest-revision:
    name: Fetch Latest Revision
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch Latest Active Revision
        id: fetch_revision
        run: |
          LATEST_REVISION=$(aws ecs list-task-definitions --family-prefix ${{ secrets.TASK_DEFINITION_FAMILY }} --status ACTIVE --sort DESC --query "taskDefinitionArns[0]" --output text | awk -F':' '{print $6}')
          echo "::set-output name=latest_revision::$LATEST_REVISION"
      
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: fetch-latest-revision

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set Revision Variable
        run: |
          if [ -z "${{ github.event.inputs.revision }}" ]; then
            REVISION=${{ needs.fetch-latest-revision.outputs.latest_revision }}
          else
            REVISION=${{ github.event.inputs.revision }}
          fi
          echo "Using revision: $REVISION"
          echo "REVISION=$REVISION" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          TASK_DEFINITION_ARN="${{ secrets.TASK_DEFINITION_FAMILY }}:$REVISION"
          echo "Deploying task definition revision: $TASK_DEFINITION_ARN"
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition $TASK_DEFINITION_ARN \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          SERVICE_ARN=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query "services[0].serviceArn" --output text)
          while true; do
            DEPLOYMENT_STATUS=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER_NAME }} --services ${{ secrets.ECS_SERVICE_NAME }} --query "services[0].deployments[?status=='PRIMARY'].rolloutState" --output text)
            if [ "$DEPLOYMENT_STATUS" == "COMPLETED" ]; then
              echo "Deployment completed successfully."
              break
            elif [ "$DEPLOYMENT_STATUS" == "FAILED" ]; then
              echo "Deployment failed."
              exit 1
            else
              echo "Deployment in progress..."
              sleep 15
            fi
          done
